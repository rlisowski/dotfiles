# http://www.kernel.org/pub/software/scm/git/docs/git-config.html
[core]
	excludesfile = ~/.gitignore_global
  # pager = less -F -X -R
  pager = delta
	editor = $EDITOR

[interactive]
  diffFilter = delta --color-only

[delta]
  navigate = true  # use n and N to move between diff sections
  dark = true      # or light = true, or omit for auto-detection
  # side-by-side = true
  theme = zenburn

[user]
	name = Rafał Lisowski
	email = lisowski.r@gmail.com
	signingkey = 0C0DF446

[init]
	templatedir = ~/.git_template

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	required = true
	process = git-lfs filter-process

[help]
	autocorrect = 10

[merge]
	stat  = true
  # tool = nvimdiff
  # conflictstyle = diff3
  conflictstyle = zdiff3
	verbosity = 1

[mergetool]
	prompt = false

[mergetool "nvimdiff"]
	; +--------------------------------+
	; | LOCAL  |     BASE     | REMOTE |
	; +--------------------------------+
	; |             MERGED             |
	; +--------------------------------+
	cmd = nvim -d $LOCAL $BASE $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'

[push]
	default = simple

[rebase]
	autosquash = true

[diff]
	renames = true
	# Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
	# instead of a/b/c/d as prefixes for patches
	mnemonicprefix = true

[diff "enc"]
  textconv = rails encrypted:show
  cachetextconv = false

[difftool]
	prompt = false

[rerere]
	enabled = true

[commit]
	template = ~/.gitmessage
	gpgsign = true
	quiet = true

[format]
	# pretty = format:%C(auto,yellow)%h%C(auto,magenta)% G? %C(auto,blue)%>(12,trunc)%ad %C(auto,green)%<(7,trunc)%aN%C(auto,reset)%s%C(auto,red)% gD% D
	# pretty = format:%C(auto,red)%h%C(auto,magenta)% G? %Cgreen(%cr - %cd) %C(bold blue)<%an> (%cn)%Creset %C(bold blue)%Creset-%C(yellow)%d %C(white)%s

[alias]
	h = help
	st = status -sb

	d = diff
	mt = mergetool
	s = switch

	b = branch -vv
	ref = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'
	refs = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'

	ci = commit
	cio = !git checkout $(git branch -a | fzf | xargs)
	co = checkout
	came = commit --amend --no-edit

	current-branch = !git branch | grep '^*' | sed s/\\*\\ //
	track = !git fetch && git branch --set-upstream-to origin/$(git current-branch)
	publish = !git push -u origin $(git current-branch)

	l = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d %C(white)%s %Cgreen(%cr - %cd) %C(bold blue)<%an> (%cn)%Creset %C(bold blue)%Creset' --abbrev-commit
	ls = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d %C(white)%s %Cgreen(%aN - %cr) %C(bold blue)%Creset' --abbrev-commit --since=last.mon --author="Rafał.Lisowski"
	today = log --since=midnight --author='Rafał Lisowski' --oneline --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d %C(white)%s %Cgreen(%cr - %cd) %C(bold blue)<%cn>%Creset %C(bold blue)%Creset' --abbrev-commit
	yesterday = log --since=day.before.yesterday.midnight --until=midnight --author='Rafał Lisowski' --oneline --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d %C(white)%s %Cgreen(%cr - %cd) %C(bold blue)<%cn>%Creset %C(bold blue)%Creset' --abbrev-commit
	churn = !git --no-pager log --all -M -C --name-only --oneline | grep -v ' ' | sort | uniq -c | sort -nr | head -20

	unstage = reset HEAD              # remove files from index (tracking)
	; uncommit = reset --mixed HEAD~
	uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state

	i = !~/bin/git-info-short
	clear = "!sh -c 'find . -name '*.orig' -delete'"
	clear-refs = "!sh -c 'git-clear-refs'"

	ctags = "!sh -c '[ -f .git/hooks/ctags ] || git init; .git/hooks/ctags' git-ctags"
	cscope = "!sh -c '[ -f .git/hooks/cscope ] || git init; .git/hooks/cscope' git-cscope"

	stats = "!(echo \"\nby hour\n--------------\") && (for i in 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23; do echo $( echo "$i\t"; git shortlog  -n --format='%ad %s' | grep " $i:" | wc -l); done) && (echo \"\n\nby day\n--------------\") && (for i in Mon Tue Wed Thu Fri Sat Sun; do echo $( echo "$i\t"; git shortlog  -n --format='%ad %s'| grep "$i " | wc -l); done) && (echo \"\n\nby user\n--------------\") && (git shortlog  -ns)"
	latest = for-each-ref --sort=-committerdate --format='%(committerdate:short) %(refname:short)'

[include]
	path = ~/.gitconfig.local
